.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Simo 3"
.TH Simo 3 "2009-04-11" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Simo \- Very simple framework for Object Oriented Perl.
.SH "VERSION"
.IX Header "VERSION"
Version 0.1008
.SH "CAUTION"
.IX Header "CAUTION"
Simo is yet experimenta stage.
.PP
Please wait until Simo will be stable.
.SH "FEATURES"
.IX Header "FEATURES"
Simo is framework that simplify Object Oriented Perl.
.PP
The feature is that
.IP "1. You can define accessors in very simple way." 4
.IX Item "1. You can define accessors in very simple way."
.PD 0
.IP "2. new method is prepared." 4
.IX Item "2. new method is prepared."
.IP "3. You can define default value of attribute." 4
.IX Item "3. You can define default value of attribute."
.IP "4. Error object is thrown, when error is occured." 4
.IX Item "4. Error object is thrown, when error is occured."
.PD
.PP
If you use Simo, you are free from bitter work 
writing new methods and accessors repeatedly.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    #Class definition
\&    package Book;
\&    use Simo;
.Ve
.PP
.Vb 3
\&    sub title{ ac }
\&    sub author{ ac }
\&    sub price{ ac }
.Ve
.PP
.Vb 3
\&    # Using class
\&    use Book;
\&    my $book = Book->new( title => 'a', author => 'b', price => 1000 );
.Ve
.PP
.Vb 2
\&    # Default value of attribute
\&    sub author{ ac default => 'Kimoto' }
.Ve
.PP
.Vb 6
\&    #Automatically build of attribute
\&    sub author{ ac auto_build => 1 }
\&    sub build_author{ 
\&        my $self = shift;
\&        $self->author( $self->title . "b" );
\&    }
.Ve
.PP
.Vb 1
\&    sub title{ ac default => 'a' }
.Ve
.PP
.Vb 4
\&    # Constraint of attribute setting
\&    use Simo::Constrain qw( is_int isa );
\&    sub price{ ac constrain => sub{ is_int } }
\&    sub author{ ac constrain => sub{ isa 'Person' } }
.Ve
.PP
.Vb 2
\&    # Filter of attribute setting
\&    sub author{ ac filter => sub{ uc } }
.Ve
.PP
.Vb 1
\&    # Trigger of attribute setting
.Ve
.PP
.Vb 2
\&    sub date{ ac trigger => sub{ $_->year( substr( $_->date, 0, 4 ) ) } } 
\&    sub year{ ac }
.Ve
.PP
.Vb 2
\&    # Read only accessor
\&    sub year{ ac read_only => 1 }
.Ve
.PP
.Vb 2
\&    # Hash ref convert of attribute setting
\&    sub country_id{ ac hash_force => 1 }
.Ve
.PP
.Vb 2
\&    # Required attributes
\&    sub REQUIRED_ATTRS{ qw( title author ) }
.Ve
.PP
.Vb 3
\&    # Inheritance
\&    package Magazine;
\&    use Simo( base => 'Book' );
.Ve
.PP
.Vb 3
\&    # Mixin
\&    package Book;
\&    use Simo( mixin => 'Class::Cloneable' );
.Ve
.PP
.Vb 3
\&    # new method include
\&    package Book;
\&    use Simo( new => 'Some::New::Class' );
.Ve
.SH "Manual"
.IX Header "Manual"
See Simo::Manual. 
.PP
I explain detail of Simo.
.PP
If you are Japanese, See also Simo::Manual::Japanese.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.Sh "ac"
.IX Subsection "ac"
ac is exported. This is used to define accessor.
.PP
.Vb 2
\&    package Book;
\&    use Simo;
.Ve
.PP
.Vb 3
\&    sub title{ ac }
\&    sub author{ ac }
\&    sub price{ ac }
.Ve
.Sh "and_super"
.IX Subsection "and_super"
and_super is exported. This is used to call super method for \s-1REQUIRED_ATTRS\s0.
.PP
.Vb 1
\&    sub REQUIRED_ATTRS{ 'm1', 'm2', and_super }
.Ve
.SH "METHODS"
.IX Header "METHODS"
.Sh "new"
.IX Subsection "new"
new method is prepared.
.PP
.Vb 2
\&    use Book;
\&    my $book = Book->new( title => 'a', author => 'b', price => 1000 );
.Ve
.Sh "new_self_and_parent"
.IX Subsection "new_self_and_parent"
new_self_and_parent resolve the inheritance of no Simo based class;
.PP
.Vb 1
\&    $self->new_self_and_parent( @_, [ 'title', 'author' ] );
.Ve
.PP
.Vb 1
\&    $self->new_self_and_parent( { self_args => [], parent_args => [] } );
.Ve
.Sh "\s-1REQUIRED_ATTRS\s0"
.IX Subsection "REQUIRED_ATTRS"
this method is expected to override.
.PP
You can define required attribute.
.PP
.Vb 2
\&    package Book;
\&    use Simo;
.Ve
.PP
.Vb 3
\&    sub title{ ac }
\&    sub author{ ac }
\&    sub price{ ac }
.Ve
.PP
.Vb 1
\&    sub REQUIRED_ATTRS{ qw( title author ) }
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Simo::Constrain \- Constraint methods for Simo 'constrain' option.
.PP
Simo::Error \- Structured error system for Simo.
.PP
Simo::Util \- Utitlity class for Simo. 
.PP
Simo::Wrapper \- provide useful methods for object.
.SH "CAUTION"
.IX Header "CAUTION"
\&\fBset_hook\fR and \fBget_hook\fR option is now not recommended. These option will be removed in future 2019/01/01
.PP
\&\fBnon named defalut value definition\fR is now not recommended. This expression will be removed in future 2019/01/01
.PP
.Vb 1
\&    sub title{ ac 'OO tutorial' } # not recommend. cannot be available in future.
.Ve
.PP
\&\fBget_attrs\fR,\fBget_attrs_as_hash\fR,\fBset_attrs\fR,\fBrun_methods\fR is now not recommended. These methods will be removed in future 2019/01/01
.SH "AUTHOR"
.IX Header "AUTHOR"
Yuki Kimoto, \f(CW\*(C`<kimoto.yuki at gmail.com>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-simo at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Simo>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Simo
.Ve
.PP
You can also look for information at:
.IP "* \s-1RT:\s0 \s-1CPAN\s0's request tracker" 4
.IX Item "RT: CPAN's request tracker"
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Simo>
.IP "* AnnoCPAN: Annotated \s-1CPAN\s0 documentation" 4
.IX Item "AnnoCPAN: Annotated CPAN documentation"
<http://annocpan.org/dist/Simo>
.IP "* \s-1CPAN\s0 Ratings" 4
.IX Item "CPAN Ratings"
<http://cpanratings.perl.org/d/Simo>
.IP "* Search \s-1CPAN\s0" 4
.IX Item "Search CPAN"
<http://search.cpan.org/dist/Simo/>
.SH "SIMILAR MODULES"
.IX Header "SIMILAR MODULES"
Class::Accessor,Class::Accessor::Fast, Moose, Mouse.
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2008 Yuki Kimoto, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
