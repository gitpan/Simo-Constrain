.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Simo::Manual::Japanese 3"
.TH Simo::Manual::Japanese 3 "2009-04-11" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Simo::Manual::Japanese \- 日本語で書かれたSimoのマニュアル
.SH "注意"
.IX Header "注意"
この記事は書きかけです。
.SH "1. Simoとは"
.IX Header "1. Simoとは"
SimoはPerlのオブジェクト指向を簡単にするモジュールです。
.PP
主な特徴として
.IP "1. アクセッサを簡潔に記述することができる。" 4
.IX Item "1. アクセッサを簡潔に記述することができる。"
.PD 0
.IP "2. コンストラクタ new が準備されている。" 4
.IX Item "2. コンストラクタ new が準備されている。"
.IP "3. 各フィールドに対して、デフォルト値の設定、値の制約などが可能。" 4
.IX Item "3. 各フィールドに対して、デフォルト値の設定、値の制約などが可能。"
.IP "4. エラーをオブジェクトとして投げるので、詳細なエラー処理が可能。" 4
.IX Item "4. エラーをオブジェクトとして投げるので、詳細なエラー処理が可能。"
.PD
.PP
ということが挙げられます。
.PP
Simoを使えば、クラスの作成するときの面倒な作業から解放されます。
.PP
もしMouseやMouseなどのオブジェクト指向を簡単にするためのモジュールを知っているのなら
Simoはこれらのモジュールをもっと簡潔にしたものだと考えてください。
.PP
Simoはオブジェクト指向のための直感的で簡潔なインターフェイスを提供します。
.SH "1. Simoのインストール"
.IX Header "1. Simoのインストール"
.Sh "1\-1. Simoのインストール"
.IX Subsection "1-1. Simoのインストール"
Simoをインストールするには
.PP
.Vb 1
\&    cpan Simo
.Ve
.PP
とします。
.PP
Windows環境でインストールしたい場合は、先に nmake をインストールしておく必要があります。
「windows nmake」という語句で検索するとインストール方法がすぐに見つかると思います。
.Sh "1\-2. Simo関連モジュールのインストール"
.IX Subsection "1-2. Simo関連モジュールのインストール"
Simoに関連するモジュールがいくつかあります。
これらのモジュールはオブジェクト指向を簡潔にすることを手助けしてくれます。
.IP "1. Simo::Wrapper \- オブジェクトの操作を便利にします。" 4
.IX Item "1. Simo::Wrapper - オブジェクトの操作を便利にします。"
.PD 0
.IP "2. Simo::Error \- エラーオブジェクトを生成します。" 4
.IX Item "2. Simo::Error - エラーオブジェクトを生成します。"
.IP "3. Simo::Util \- オブジェクトの操作を便利にします。" 4
.IX Item "3. Simo::Util - オブジェクトの操作を便利にします。"
.IP "4. Simo::Constrain \- フィールドに設定される値を制約します。" 4
.IX Item "4. Simo::Constrain - フィールドに設定される値を制約します。"
.PD
.PP
Simoのみのインストールでもクラスの作成は行うことができますが、
これらのモジュールも一緒にインストールしておくとさらに便利です。
.PP
これらのモジュールを一度にインストールするには
.PP
.Vb 1
\&    cpan Bundle::Simo
.Ve
.PP
とします。
.SH "2. クラスの作成とその使用方法"
.IX Header "2. クラスの作成とその使用方法"
.Sh "2\-1. クラスの作成とアクセッサの記述"
.IX Subsection "2-1. クラスの作成とアクセッサの記述"
Simoを使えば、アクセッサを簡潔に記述することができます。
以下の例は、title,author,priceという3つのフィールドを持つBookクラスの定義です。
.PP
.Vb 2
\&    package Book;
\&    use Simo;
.Ve
.PP
.Vb 3
\&    sub title{ ac }
\&    sub author{ ac }
\&    sub price{ ac }
.Ve
.PP
アクセッサを定義するには ac 関数を呼ぶだけです。
またコンストラクタ new は自動的に準備されます。
.PP
また
.PP
.Vb 2
\&    use strict;
\&    use warnings;
.Ve
.PP
という毎回書かなくてはいけない記述は自動的に行ってくれます。
.Sh "2\-2. オブジェクトの作成"
.IX Subsection "2-2. オブジェクトの作成"
作成したクラスは,普通のクラスと同じように使用することができます。
以下は、オブジェクトを作成する例です。
.PP
.Vb 1
\&    use Book;
.Ve
.PP
.Vb 1
\&    my $book = Book->new( title => 'Goog new', author => 'Kimoto', price => 2000 );
.Ve
.PP
コンストラクタ new が準備されているので呼び出すことができます。
new には、ハッシュかハッシュのリファレンスを渡すことができます。
.PP
以下はハッシュのリファレンスを渡す例です。
.PP
.Vb 1
\&    my $book = Book->new( { title => 'Goog new', author => 'Kimoto', price => 2000 } );
.Ve
.SH "3. アクセッサのオプション"
.IX Header "3. アクセッサのオプション"
.Sh "3\-1. フィールドのデフォルト値 default"
.IX Subsection "3-1. フィールドのデフォルト値 default"
フィールドのデフォルト値の設定は以下のように行います。
.PP
.Vb 2
\&    package Book;
\&    use Simo;
.Ve
.PP
.Vb 3
\&    sub title{ ac default => 'Good news' }
\&    sub author{ ac default => [ 'Kimoto', 'Kishimoto' ] }
\&    sub price{ ac default => { low => 1500, normal => 2000 } }
.Ve
.PP
フィールドに値が設定されていないときにアクセッサを呼び出すと default で指定された値が使用されます。
.PP
取得される値は、defaultで指定された値の\fBコピー\fRです。
デフォルト値がリファレンスなどの「数値や文字列」以外のものであった場合は、Storableのclone関数によって値がコピーされます。
これは、大きなデータであった場合はオーバーヘッドになりえます。
.PP
デフォルト値がリファレンスやオブジェクトであった場合は、
default ではなくて後で解説する auto_build を使用することも考慮に入れてください。
.Sh "3\-2. フィールドの構築 auto_build"
.IX Subsection "3-2. フィールドの構築 auto_build"
ときに、他のフィールドの値に基づいて、フィールドを構築したい場合があります。
たとえば、フィールドに設定されたホスト名からNet::FTPオブジェクトを構築したい場合などです。
.PP
このような場合は、auto_build を使用すると便利です。
auto_build オプションを指定すると、アクセッサが呼ばれたときに
ビルダーメソッドを自動的に呼び出してくれます。
.PP
.Vb 3
\&    package YourApp;
\&    use Simo;
\&    use Net::FTP;
.Ve
.PP
.Vb 1
\&    sub host{ default => 'some.host.name' }
.Ve
.PP
.Vb 1
\&    sub net_ftp{ ac auto_build => 1 }
.Ve
.PP
.Vb 4
\&    sub build_net_ftp{
\&        my $self = shift;
\&        $self->net_ftp( Net::FTP->new( $self->host ) );
\&    }
.Ve
.PP
ビルダーメソッドは、build_net_ftp のように
.PP
.Vb 1
\&    build_アクセッサ名
.Ve
.PP
にする必要があります。
.PP
2回目移行のフィールドへのアクセスは、ビルダーメソッドによって設定された値が使用されます。
.Sh "3\-3\-1. フィールドの制約 constrain"
.IX Subsection "3-3-1. フィールドの制約 constrain"
フィールドに制約を持たせたい場合があります。
数値だけを受け入れたかったり、特定のクラスのオブジェクトだけを受け入れたかったりする場合です。
.PP
このような場合は、constrain を使用します。
constarin には、好きな制約関数を渡すこともできますが、
通常は、Simo::Constrain に制約のための関数が用意されているのでそれを使います。
.PP
.Vb 3
\&    package Book;
\&    use Simo;
\&    use Simo::Constrain qw( is_str is_int isa );
.Ve
.PP
.Vb 1
\&    sub title{ ac constrain => \e&is_str }
.Ve
.PP
.Vb 1
\&    sub author{ ac constrain => sub{ isa 'Person' } }
.Ve
.PP
.Vb 1
\&    sub price{ ac constrain => \e&is_int }
.Ve
.PP
titleに設定できるの文字列だけ、authorに設定できるのはPersonクラスのオブジェクトだけ、
priceに設定できるのは整数値だけといったように、フィールドに設定できる値が制約できます。
.PP
もし制約に違反すれば、例外が発生しプログラムは終了します。
以下のようなメッセージが表示されます。
.PP
.Vb 1
\&    Book::price must be integer.( this value is bad ) at b.pl line 6
.Ve
.Sh "3\-3\-2. 制約違反にに対する例外処理"
.IX Subsection "3-3-2. 制約違反にに対する例外処理"
Simoはフィールドに制約違反が起こったときに例外を投げます。
この例外は単なる文字列ではなくて、Simo::Errorオブジェクトです。
.PP
このオブジェクトは、制約違反を起こしたフィールド名、設定された値などの情報を持っています。
.PP
このオブジェクトの情報を見たいときは、Simo::Util の err 関数を使用します。
.PP
以下の例では、priceに整数以外を渡したので例外が発生します。
この例外をevalでキャッチした後、err 関数で内容を取得することができます。
.PP
.Vb 2
\&    use Book;
\&    use Simo::Util qw( err );
.Ve
.PP
.Vb 1
\&    my $book = eval{ Book->new( price => 'string', title => 'Good news' ) };
.Ve
.PP
.Vb 7
\&    if( my $err = err ){
\&        my $type = $err->type;  # 例外の種類
\&        my $msg = $err->msg;    # 例外メッセージ
\&        my $pos = $err->pos;    # 例外が起こった場所
\&        my $pkg = $err->pkg;    # 例外が起こったパッケージ名
\&        my $attr = $err->attr   # 例外を起こしたフィールド名
\&        my $val = $err->val;    # 例外の原因になった値
.Ve
.PP
.Vb 10
\&        if( $attr eq 'price' ){
\&            # やりたいエラー処理を行う。
\&        }
\&        else( $attr eq 'title' ){
\&            # ...
\&        }
\&        else{
\&            # ...
\&        }
\&    }
.Ve
.PP
どのフィールド名で制約違反が起こって、それがどのような値なのかを取得できるため
詳細なエラー処理を行うことができます。
.PP
エラーオブジェクトについては Simo::Error も参照してください。
.Sh "3\-3\-3 独自の制約関数の実装"
.IX Subsection "3-3-3 独自の制約関数の実装"
もし独自に制約関数を実装したいならば可能です。
Simoの制約関数と同じ作成方法で、制約関数を作成すれば非常に調和の取れたものになります。
.PP
Simo::Constrainのis_define関数の実装を例として掲載しておきます。
.PP
.Vb 5
\&    sub is_defined(;$){
\&        my $val = shift || $_;
\&        defined($val) or $@ = "must be defined.( undef is bad )", return 0;
\&        return 1;
\&    }
.Ve
.PP
制約関数は、引数があればそれを使用し、なければデフォルト変数 \f(CW$_\fR を使用するようにします。
このように記述すれば、
.PP
.Vb 1
\&    sub title{ ac constrain => sub{ is_defined } }
.Ve
.PP
のように引数を省略した記述が可能になります。
.PP
制約を満たさなかった場合は、$@ にメッセージを設定して、偽値を返却してください。
このメッセージはエラーメッセージとして使用されます。
.PP
制約を満たした場合は、真値を返却してください。
.Sh "3\-3\-4 複数の制約を記述する方法"
.IX Subsection "3-3-4 複数の制約を記述する方法"
もし複数の制約を記述したい場合は2つの方法があります。
.PP
ひとつめは、無名サブルーチンとして実装することです。
以下の例はBookクラスとCloneableクラスを継承していることを保障する例です。
.PP
.Vb 1
\&    sub title{ ac constain => sub{ isa Book && isa Cloneable } }
.Ve
.PP
もうひとつは、配列のリファレンスに複数の制約関数を渡す方法です。
.PP
.Vb 1
\&    sub title{ ac constrain => [ \e&is_xxx, \e&is_yyy, \e&is_zzz ] }
.Ve
.Sh "3\-4\-1. フィールド値のフィルター filter"
.IX Subsection "3-4-1. フィールド値のフィルター filter"
もし、設定される値に何らかの処理を施したいのならfilterを使用してください。
.PP
以下の例では設定される値を大文字にします。
.PP
.Vb 2
\&    package Book;
\&    use Simo;
.Ve
.PP
.Vb 1
\&    sub title{ ac filter => sub{ uc } }
.Ve
.PP
もうひとつ末尾のスラッシュを取り除く例を書いておきます。
.PP
.Vb 2
\&    package Book;
\&    use Simo;
.Ve
.PP
.Vb 1
\&    sub dir{ ac filter => \e&remove_last_slash }
.Ve
.PP
.Vb 5
\&    sub remove_last_slash{
\&        my $val = shift;
\&        $val =~ s#/$##;
\&        return $val;
\&    }
.Ve
.PP
フィルタのための関数を作る場合は、フィルタ後の値をreturnで返却するようにしてください。
.Sh "3\-4\-2 複数の値のフィルタ"
.IX Subsection "3-4-2 複数の値のフィルタ"
フィルタも制約と同じように複数並べることができます。
.PP
.Vb 1
\&    sub title{ ac filter => [ \e&filter_xxx, \e&fitler_yyy, \e&filter_zzz ] }
.Ve
.Sh "3\-5\-1 値が設定された場合のトリガ trigger"
.IX Subsection "3-5-1 値が設定された場合のトリガ trigger"
トリガとはSimoでは、値が設定された場合に実行されるメソッドのことをさします。
.PP
たとえば、ある値に変更があったら、何らかの処理を実行したい場合にトリガは便利です。
.PP
ひとつの例として、GUIでのプログラミングで、
色の値が変更されたら再描画をする関数を呼び出したい場合などが挙げられます。
.PP
.Vb 2
\&    package Button;
\&    use Simo;
.Ve
.PP
.Vb 4
\&    sub color{ ac trigger => \e&paint }
\&    sub paint{
\&        # 再描画の処理
\&    }
.Ve
.Sh "3\-5\-2 複数のトリガ"
.IX Subsection "3-5-2 複数のトリガ"
トリガも、制約やフィルタと同じように複数ならべることができます。
.PP
.Vb 1
\&    sub coloer{ ac tirgger => [ \e&trigger_xxx, \e&trigger_yyy, \e&trigger_zzz ]
.Ve
.Sh "3\-6 読み取り専用のアクセッサ read_only"
.IX Subsection "3-6 読み取り専用のアクセッサ read_only"
読み取り専用のアクセッサを作成するには、read_onlyを使用します。
.PP
.Vb 2
\&    package Book;
\&    use Simo;
.Ve
.PP
.Vb 1
\&    sub title{ ac default => 'Good news', read_only => 1 }
.Ve
.PP
読み取り専用のアクセッサは、値が設定されようとしたときに、例外を発生させます。
.PP
一般的には、default と組み合わせて使用します。
.Sh "3\-6 ハッシュとしての解釈を強制する。hash_force"
.IX Subsection "3-6 ハッシュとしての解釈を強制する。hash_force"
Simoには、アクセッサに設定される値は必ずスカラーです。また取得する場合も必ずスカラーになります。
.PP
配列を設定することやハッシュを設定することはできません。
.PP
アクセッサに配列が渡された場合はどうなるでしょうか?
.PP
.Vb 2
\&    my $book = Book->new;
\&    $book->author( 'Kimoto', 'Kenta', 'Mori' );
.Ve
.PP
このような場合は、強制的に配列のリファレンスへと変換されます。
.PP
つまり、設定される段階では、
.PP
.Vb 1
\&    [ 'Kimoto', 'Kenta', 'Mori' ]
.Ve
.PP
になります。
.PP
たとえ
.PP
.Vb 1
\&    $book->author( main => 'Kimoto', sub => 'Kenta' );
.Ve
.PP
のようにハッシュを設定するように意図していたとしても
.PP
.Vb 1
\&    { main => 'Kimoto', sub => 'Kenta' }
.Ve
.PP
ではなく
.PP
.Vb 1
\&    [ 'main', 'Kimoto', 'sub', 'Kenta' ]
.Ve
.PP
のように変換されます。
.PP
そこでハッシュとして解釈してほしい場合は以下のようにhash_forceを使用します。
.PP
.Vb 2
\&    package Book;
\&    use Simo;
.Ve
.PP
.Vb 1
\&    sub author{ ac hash_force => 1 }
.Ve
.SH "4.継承"
.IX Header "4.継承"
.Sh "4\-1 継承 base"
.IX Subsection "4-1 継承 base"
Simoで継承を行うには以下のようにします。
Bookというクラスを継承して、Magazineというクラスを作成する例です。
.PP
.Vb 2
\&    package Magazine;
\&    use Simo( base => 'Book' );
.Ve
.PP
base モジュールを使うのではないことに注意してください。
内部的にはbase モジュールを呼んでいるのですが、継承の順序を保障するためにこの記述を行ってください。
.Sh "4\-2 ミックスイン mixin"
.IX Subsection "4-2 ミックスイン mixin"
Simoは記法上でミックスインをサポートします。
.PP
以下の例は、Class::Cloneableと<Class::Comparable> をミックスインした例です。
.PP
.Vb 2
\&    package Book;
\&    use Simo( mixin => [ 'Class::Cloneable', 'Class::Comparable' ] );
.Ve
.PP
Simoのミックスインは、何も特別なことはしません。Simoのミックスインは単なる多重継承です。
.PP
けれども、クラスを作った人は、多重継承を意図したものではなく、ミックスインを意図したものだ
ということを伝えることができます。
.PP
つまり、これらのクラスはコンストラクタを持たず、何か実装すべきメソッドがあるかもしれないという
ことを使用者に感じさせることができます。
.Sh "4\-3 オーバーライド可能なコンストラクタの実装 new"
.IX Subsection "4-3 オーバーライド可能なコンストラクタの実装 new"
少し高度な話題です。読み飛ばしてもかまいません。
.PP
もしかしたら時にオーバーライド可能なコンストラクタを実装したくなる場合があるかもしれません。
.PP
これが、どのような場合を想定しているかといえば、Simoで作成されていないクラスを継承したい場合です。
.PP
一例を挙げましょう。CGI::Application を継承して新しいクラスを作りたいとします。
.PP
.Vb 2
\&    use MyApp;
\&    use Simo( base => 'CGI::Application' );
.Ve
.PP
.Vb 1
\&    sub app_name{ ac }
.Ve
.PP
このようにクラスを作成した場合、問題になるのは、app_nameの初期化ができないということです。
.PP
newに呼ばれるコンストラクタは、CGI::Applicationのものであり、Simoのものではありません。
.PP
.Vb 1
\&    my $myapp = MyApp->new( app_name => 'YHA' );
.Ve
.PP
のように記述することができないのです。
.PP
初期化を実行するためには、親のコンストラクタを実行してオブジェクトを生成してから、
そのオブジェクトにapp_nameを加える必要があります。
.PP
CGI::Applicationのコンストラクタでは、TMPL_PATH, \s-1PARAMS\s0, \s-1QUERY\s0 を初期化することができます。
Simoのコンストラクタでは、app_nameを初期化することができます。
.PP
この合体を行うのは非常に面倒です。Simoは、この苦労をできるだけ取り除くために、
new_self_and_parentというメソッドを持っています。
.PP
親のコンストラクタを実行しながら、Simoのコンストラクタを実行するには、以下のようにします。
.PP
.Vb 2
\&    package MyApp;
\&    use Simo( base => 'CGI::Application' );
.Ve
.PP
.Vb 4
\&    sub new{
\&        my $self = shift->new_self_and_parent( @_, [ 'TMPL_PATH', 'PARAMS', 'QUERY' ] );
\&        return $self;
\&    }
.Ve
.PP
new_self_and_parent の第2引数には、親のコンストラクタの初期化パラメータを配列のリファレンスで指定します。
.PP
こう記述すれば、
.PP
.Vb 1
\&    my $myapp = MyApp->new( app_name => 'YHA', TMPL_PATH => 'xxx', PARAMS => {} QUERY => CGI->new );
.Ve
.PP
のように、親のコンストラクタとSimoのコンストラクタを同時に実行することが可能です。
.PP
そして、あなたは、CGI::Application用のコンストラクタとして、もう少し便利なものを提供できるかもしれません。
.PP
そうなれば、それをコンストラクタのみのクラスにして見ましょう。
.PP
.Vb 1
\&    package Simo::New::CGI::Application;
.Ve
.PP
.Vb 2
\&    sub new{
\&        my $self = shift->new_self_and_parent( @_, [ 'TMPL_PATH', 'PARAMS', 'QUERY' ] );
.Ve
.PP
.Vb 1
\&        # もう少し便利なことを行う。
.Ve
.PP
.Vb 2
\&        return $self;
\&    }
.Ve
.PP
そしてこのようにして作成したなら、
.PP
.Vb 2
\&    package MyApp;
\&    use Simo( base => 'CGI::Application', new => 'Simo::New::CGI::Application' );
.Ve
.PP
というふうにnewメソッドをインポートすることができます。これはさらに継承可能であって、
.PP
.Vb 2
\&    package MyApp;
\&    use Simo( base => 'CGI::Application', new => 'Simo::New::CGI::Application' );
.Ve
.PP
.Vb 2
\&    sub new{
\&        my $self = shift->SUERP::new( @_ );
.Ve
.PP
.Vb 1
\&        # ユーザが好きなことをする。
.Ve
.PP
.Vb 2
\&        return $self;
\&    }
.Ve
.PP
のように利用することができます。
.PP
ちょっと難しい。
.Sh "4\-4 newをオーバーライドする。"
.IX Subsection "4-4 newをオーバーライドする。"
newのオーバーライドについて書いておきます。
.PP
Simoによって自動的に用意されたnewは、オーバーライドすることができます。
.PP
これは、Class::Accessorに対する大きな利点です。
.PP
また、newをオーバーライドすることを推奨しないMooseやMouseに対しても大きな利点です。
.PP
Perlでオブジェクト指向を学んできた知識をSimoでは自然に利用することができます。
.PP
newのオーバーライドの雛形は以下のようになります。
.PP
.Vb 2
\&    package Book;
\&    use Simo;
.Ve
.PP
.Vb 2
\&    sub new{
\&        my $self = shift->SUERP::new( @_ );
.Ve
.PP
.Vb 1
\&        # 好きなことをする。
.Ve
.PP
.Vb 2
\&        return $self;
\&    }
.Ve
.SH "5. その他の機能"
.IX Header "5. その他の機能"
.Sh "5\-1 必要不可欠なフィールド"
.IX Subsection "5-1 必要不可欠なフィールド"
たとえばtitleとauthorいうフィールドが必要不可欠ならばこう書きます。
.PP
REQUIRED_ATTRSというメソッドをオーバーライドしてください。
.PP
.Vb 2
\&    package Book;
\&    use Simo;
.Ve
.PP
.Vb 2
\&    sub title{ ac }
\&    sub author{ ac }
.Ve
.PP
.Vb 1
\&    sub REQUIRED_ATTRS{ qw/title author/ }
.Ve
.PP
このように記述すれば、
.PP
.Vb 1
\&    my $book = Book->new;
.Ve
.PP
のような記述をしたときに、例外を投げてくれます。
.PP
このときのエラーのタイプは
.PP
.Vb 1
\&    attr_required
.Ve
.PP
になります。
.PP
理想としては、 sub title{ ac required => 1 } という記述をしたかった。
.PP
けれども、Simoのアクセッサは必ず遅延で評価されるため、コンストラクタが呼び出された時点では、
それが、必要不可欠なのかどうかを判定できません。
.PP
そのために、REQUIRED_ATTRS をオーバーライドするという解決策をとりました。
.PP
スペリングのミスに非常に気をつけてください( 容易に間違えてしまいます。)
.Sh "5\-2 必要不可欠なフィールドと継承の問題"
.IX Subsection "5-2 必要不可欠なフィールドと継承の問題"
上記のBookクラスを継承してMagazineというクラスを作成した場合、必要不可欠なフィールドの定義する方法を解説します。
.PP
ここで非常に間違いやすいことがあります。title, auhtor, price の3つのフィールドを必要不可欠にするために、
.PP
.Vb 2
\&    package Magazine;
\&    use Simo( base => 'Book' );
.Ve
.PP
.Vb 1
\&    sub price{ ac }
.Ve
.PP
.Vb 1
\&    sub REQUIRED_ATTRS{ 'price' }
.Ve
.PP
と書いてしまっては間違いです。
.PP
REQUIRE_ATTRSはオーバーライドされるために、priceだけが必要不可欠なフィールドになってしまいます。
.PP
ただしくは、
.PP
.Vb 1
\&    sub REQUIRED_ATTRS{ qw/title author price/ }
.Ve
.PP
と書く必要があります。
.PP
でもこれって、面倒だよね。
.PP
そこで、Simoは簡易な記述を用意しています。
.PP
.Vb 1
\&    sub REQUIRED_ATTRS{ 'price', and_super }
.Ve
.PP
and_super メソッドを呼ぶとスーパークラスのメソッドが呼ばれ、 'title' と 'author' が返却されます。
.SH "6. オブジェクトを便利に利用する Simo::Util の o 関数"
.IX Header "6. オブジェクトを便利に利用する Simo::Util の o 関数"
これでSimoの機能の一通りの解説が終わりました。
.PP
ここまでは、クラスの作り方の解説でした。
.PP
実はSimoでは、クラスを作るだけではなく、クラスを使う側にも非常に配慮したつくりになっています。
.PP
その根幹を成すのが、 Simo::Util の o 関数( おーかんすう )です。
.Sh "6\-1. 複数のフィールドに値を設定する。 set_values"
.IX Subsection "6-1. 複数のフィールドに値を設定する。 set_values"
複数のフィールドの値を設定するには以下のようにします。
.PP
.Vb 1
\&    use Simo::Util 'o';
.Ve
.PP
.Vb 1
\&    my $book = Book->new;
.Ve
.PP
.Vb 1
\&    o($book)->set_values( title => 'Good news', author => 'Kimoto' );
.Ve
.PP
まず、use Simo::Util 'o' で o関数をインポートします。
.PP
そして、利用する場合には、 o($book) のようにo関数にオブジェクトを渡します。
.PP
そして、そこからメソッドを呼び出します。
.PP
これが、o関数の基本的な約束事です。
.PP
.Vb 1
\&    o($book)->set_values( title => 'Good new', author => 'Kimoto' );
.Ve
.PP
で、複数のフィールドに値を設定することができます。
.PP
ここから先の解説は、
.PP
.Vb 1
\&    use Simo::Util 'o';
.Ve
.PP
.Vb 1
\&    my $book = Book->new;
.Ve
.PP
を先頭に記述したものとして解説します。
.Sh "6\-2. 複数のフィールドから値を取り出す。 get_values"
.IX Subsection "6-2. 複数のフィールドから値を取り出す。 get_values"
複数のフィールドから値を取り出すには以下のようにします。
.PP
.Vb 1
\&    my ( $title, $auhtor ) = o($book)->get_values( qw/title author/ );
.Ve
.PP
ハッシュスライスのように使用できます。
.Sh "6\-3 複数のフールドから値をハッシュのリファレンスとして取り出す。 get_hash"
.IX Subsection "6-3 複数のフールドから値をハッシュのリファレンスとして取り出す。 get_hash"
複数のフィールドから値をハッシュのリファレンスとして取り出すことができます。
.PP
.Vb 1
\&    my $hash = o($book)->get_hash( qw/title author/ );
.Ve
.PP
得られたハッシュのリファレンスは
.PP
.Vb 4
\&    {
\&        title => 'xxx',
\&        author => 'yyy'
\&    }
.Ve
.PP
のようになります。
.Sh "6\-3. オブジェクトのコピーを作成する。 clone"
.IX Subsection "6-3. オブジェクトのコピーを作成する。 clone"
オブジェクトのコピーを作成するには
.PP
.Vb 1
\&    my $book_copy = o($book)->clone
.Ve
.PP
とします。内部的には、Storable の dclone関数が使用されています。
.Sh "6\-4. オブジェクトをシリアライズまたはデシリアライズする。 freeze, thaw"
.IX Subsection "6-4. オブジェクトをシリアライズまたはデシリアライズする。 freeze, thaw"
オブジェクトをシリアライズするには、
.PP
.Vb 1
\&    my $book_str = o($book)->freeze;
.Ve
.PP
でシリアライズするには、
.PP
.Vb 1
\&    my $book = o->thaw( $book_str );
.Ve
.PP
とします。
.PP
シリアライズというのは、オブジェクトを保存できるように文字列化したものです。
.PP
デシリアライズというのは、文字列からオブジェクトへの復元のことです。
.PP
内部的には、Storableの freeze関数とthaw関数を使用しています。
.Sh "6\-4 クラスをロードして、コンストラクタを呼び出す。 new"
.IX Subsection "6-4 クラスをロードして、コンストラクタを呼び出す。 new"
クラスを自動的にロードしてコンストラクタを呼び出すには、
.PP
.Vb 1
\&    my $book = o('Book')->new;
.Ve
.PP
とします。
.PP
この記述の便利なところは、
.PP
.Vb 1
\&    use Book;
.Ve
.PP
という記述をする必要がないということです。コードの重複を減らすのに役に立ちます。
.PP
ほとんどのコンストラクタは、newという名前なのでよいのですが、DBI関連のモジュールの
コンストラクタは慣習的にconnectです。
.PP
このために、connect というコンストラクタも準備されています。
.PP
.Vb 1
\&    my $dbh = o('DBI')->connect( # ... );
.Ve
.Sh "6\-5 オブジェクトに設定された値が有効かどうかを確認する。 validate"
.IX Subsection "6-5 オブジェクトに設定された値が有効かどうかを確認する。 validate"
オブジェクトに設定された値が有効化どうかを確認するには、
.PP
.Vb 4
\&    $book->validate(
\&        title => sub{ length $_ < 100 },
\&        price => sub{ $_ > 0 }
\&    );
.Ve
.PP
とします。
.PP
有効かどうかを確認する関数が偽を返したときは、例外を投げます。
.PP
このとき投げられる例外は、 Simo::Error オブジェクトになります。
.PP
エラーのタイプは、
.PP
.Vb 1
\&    value_invalid
.Ve
.PP
になります。
.PP
evalで囲って例外を拾うには、Simo::Utilの err 関数を使います。
.PP
.Vb 1
\&    Simo::Util qw( o err );
.Ve
.PP
.Vb 6
\&    eval{
\&        $book->validate(
\&            title => sub{ length $_ < 100 },
\&            price => sub{ $_ > 0 }
\&        );        
\&    };
.Ve
.PP
.Vb 2
\&    if( my $err = err ){
\&        if( $err->attr eq 'title' ){
.Ve
.PP
.Vb 2
\&        }
\&        elsif( $er->attr eq 'author' ){
.Ve
.PP
.Vb 2
\&        }
\&        esle{
.Ve
.PP
.Vb 2
\&        }
\&    }
.Ve
.PP
このようにvalidateメソッドとerr関数を使用すると、
フィールドの値ごとにエラーをチェックすることができます。
.Sh "6\-6 new して同時に、validateする。 new_and_validate"
.IX Subsection "6-6 new して同時に、validateする。 new_and_validate"
new と validate を同時に行えると便利な場合があります。
.PP
.Vb 1
\&    my $q; # 外部からやってきた値。
.Ve
.PP
.Vb 4
\&    my $book = o('Book')->new_and_validate( 
\&        title => $q->{ title }, sub{ length $_ < 100 },
\&        author => $q->{ author }, sub{ $_ > 0 }
\&    );
.Ve
.PP
このようにオブジェクトを生成させながら、値の有効性のチェックが同時にできます。
.PP
例外を捕獲するevalを組み合わせて以下のように書くと便利です。
.PP
.Vb 6
\&    my $book = eval{
\&        o('Book')->new_and_validate( 
\&            title => $q->{ title }, sub{ length $_ < 100 },
\&            author => $q->{ author }, sub{ $_ > 0 }
\&        )
\&    };
.Ve
.PP
このメソッドは必ず3組で記述する必要があります。
.PP
制限を設けたくない場合は、
.PP
.Vb 3
\&    my $book = o('Book')->new_and_validate( 
\&        price => $q->{ price }, sub{ 1 }
\&    );
.Ve
.PP
sub{ 1 } を渡します。
.PP
また、このメソッドはもうひとつの記法があります。ふたつのハッシュリファレンスを渡す方法です。
.PP
.Vb 10
\&    my $book = o('Book')->new_and_validate(
\&        {
\&            title => $q->{ title },
\&            author => $q->{ author },
\&        },
\&        {
\&            title =>  sub{ $_ > 0 },
\&            author => sub{ length $_ < 100 }
\&        }
\&    );
.Ve
.Sh "6\-7 メソッドを連続して実行する。 run_methods"
.IX Subsection "6-7 メソッドを連続して実行する。 run_methods"
メソッドを連続して実行するには、run_methods を使用します。
.PP
たとえば、データを選択するような記法を持つメソッドに対して連続的に実行するときに便利です。
.PP
このチェーンはメソッドチェーンを意識して作られました。
.PP
メソッドチェーンよりも便利な点は、メソッドの実行が構造化されているために、他のデータと連携しやすい点です。
.PP
.Vb 5
\&    my $result = o($book_list)->run_methods(
\&        find => [ 'author' => 'kimoto' ],
\&        sort => [ 'price', 'desc' ],
\&        'get_result'
\&    );
.Ve
.Sh "6\-8 複数のフィールドの値をフィルタする。 filter_values"
.IX Subsection "6-8 複数のフィールドの値をフィルタする。 filter_values"
複数のフィールドの値を別の値に変換したいときは、filter_valuesを使用します。
.PP
.Vb 1
\&    o($book)->filter_valuse( sub{ uc }, qw/title, author/ );
.Ve
.PP
このように記述すると、title と author のフィールドの値が大文字に変換されます。
.PP
このメソッドのもうひとつの特徴として、フィールドの値が配列だった場合はその値の
すべてを変換してくるというものがあります。
.PP
またフィールドの値がハッシュだった場合に、ハッシュの値のすべてを変換してくれます。
.PP
.Vb 2
\&    package Book;
\&    use Simo;
.Ve
.PP
.Vb 2
\&    sub title{ ac default => { main => 'Good nesw', sub => 'yha' } }
\&    sub author{ ac default => [ 'Kimoto', 'Taro' ] }
.Ve
.PP
たとえば上記のようなフィールドであった場合は、
.PP
.Vb 1
\&    o($book)->filter_values( sub{ uc }, qw/title author/ );
.Ve
.PP
とすると、配列の全部の値と、ハッシュの全部の値が大文字に変換されます。
.Sh "6\-9 複数のフィールドの値をエンコード、またはデコードする。 encode_values, decode_values"
.IX Subsection "6-9 複数のフィールドの値をエンコード、またはデコードする。 encode_values, decode_values"
上記の、filter_values にencode関数, decode関数を適用したものが、用意されています。
.PP
.Vb 1
\&    o($book)->encode_values( 'utf8', q/title author/ );
.Ve
.PP
.Vb 1
\&    o($book)->decode_values( 'utf8', q/title author/ );
.Ve
.PP
のように使用します。
.Sh "6\-9 XMLからオブジェクトを生成する。 new_from_xml"
.IX Subsection "6-9 XMLからオブジェクトを生成する。 new_from_xml"
XMLからオブジェクト生成することもできます。
.PP
以下のXMLを見てください。まるでオブジェクトのようなXMLです。
.PP
.Vb 3
\&    <?xml version="1.0" encoding='UTF-8' ?>
\&    <root __CLASS="Book" >
\&      <title>Good man</title>
.Ve
.PP
.Vb 6
\&      <author __CLASS="Person">
\&        <name>Kimoto</name>
\&        <age>28</age>
\&        <country>Japan</country>
\&      </author>
\&    </root>
.Ve
.PP
クラス名の表現に
.PP
.Vb 1
\&    __CLASS="Book"
.Ve
.PP
というものが使われています。
.PP
.Vb 1
\&    my $book = o->new_from_xml( $xml );
.Ve
.PP
という記述でこのようなXMLを解析して、オブジェクトを生成することができます。
.PP
.Vb 1
\&    $book->author->name;
.Ve
.PP
のように深い階層のオブジェクトも生成され利用できます。
.PP
コンストラクタ名がnewではない場合は、
.PP
.Vb 2
\&    <root __CLASS="Book" __CLASS_CONSTRUCTOR="create" >
\&    </root>
.Ve
.PP
のように、_\|_CLASS_\|_CONSTRUCTOR に コンストラクタ名を指定してください。
.Sh "6\-10 XMLを元にオブジェクトのフィールド値を設定する。 set_values_from_xml"
.IX Subsection "6-10 XMLを元にオブジェクトのフィールド値を設定する。 set_values_from_xml"
使い方は、new_from_xml とよく似ています。
.PP
Bookオブジェクトは作成されていて、
下記のようなデータをオブジェクトに設定したい場合などに使用します。
.PP
.Vb 3
\&    <?xml version="1.0" encoding='UTF-8' ?>
\&    <root>
\&      <title>Good man</title>
.Ve
.PP
.Vb 6
\&      <author __CLASS="Person">
\&        <name>Kimoto</name>
\&        <age>28</age>
\&        <country>Japan</country>
\&      </author>
\&    </root>
.Ve
.PP
以下がサンプルです。
.PP
.Vb 2
\&    my $book = Book->new;
\&    o($book)->set_values_from_xml( $xml );
.Ve
.SH "7. 最後に"
.IX Header "7. 最後に"
最後まで読んでくれてありがとうございます。
